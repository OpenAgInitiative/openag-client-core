#!/usr/bin/env python
import os
import time
import rospkg
import atexit
import argparse
import requests
import subprocess

from openag.couch import Server
from openag.cli.config import config as cli_config
from openag.db_names import (
    SOFTWARE_MODULE, FIRMWARE_MODULE, ENVIRONMENTAL_DATA_POINT
)

from openag_brain import commands
from openag_brain.utils import resolve_fixtures

modules = None

@atexit.register
def kill_children():
    if modules is not None:
        modules.terminate()
        modules.wait()

def spawn_modules(screen=False):
    roslaunch_command = ["roslaunch", "openag_brain", "modules.launch"]
    if screen:
        roslaunch_command.append("--screen")
    return subprocess.Popen(roslaunch_command)

def main(api_server, db_server, fixtures, screen):
    # Initialize the database
    print "Initializing the database"
    db_server = db_server or cli_config["local_server"]["url"]
    command = ["openag", "db", "init"]
    if db_server:
        command.extend(["--db_url", db_server])
    db_server = db_server or "http://localhost:5984"
    api_server = api_server or "http://localhost:5000"
    command.extend(["--api_url", api_server])
    if subprocess.call(command):
        raise RuntimeError("Failed to initialize database")
    server = Server(db_server)

    # Load the fixture
    for fixture_path in fixtures:
        print "Applying fixture {}".format(fixture_path)
        if subprocess.call(
            ["openag", "db", "load_fixture", fixture_path]
        ):
            raise RuntimeError("Failed to load fixture " + fixture_path)

    # Update any firmwae_module_types loaded by the fixtures
    if subprocess.call(
        ["openag", "db", "update_module_types"]
    ):
        raise RuntimeError("Failed to update module types")

    # Start the software modules
    print "Generating launch file"
    commands.update_launch(server)
    global modules
    print "Spawning software modules"
    modules = spawn_modules(screen)

    # Whenever the software or firmware module configuration changes, restart
    # the software modules
    software_db = server[SOFTWARE_MODULE]
    firmware_db = server[FIRMWARE_MODULE]
    edp_db = server[ENVIRONMENTAL_DATA_POINT]
    last_software_seq = software_db.changes(
        limit=1, descending=True
    ) ["last_seq"]
    last_firmware_seq = firmware_db.changes(
        limit=1, descending=True
    )["last_seq"]
    while True:
        time.sleep(5)
        software_changes = software_db.changes(since=last_software_seq)
        firmware_changes = firmware_db.changes(since=last_firmware_seq)
        last_software_seq = software_changes["last_seq"]
        last_firmware_seq = firmware_changes["last_seq"]
        if len(software_changes["results"]) or len(firmware_changes["results"]):
            print "Module configuration changed; Restarting"
            modules.terminate()
            print "Generating launch file"
            commands.update_launch(server)
            modules.wait()
            print "Spawning software modules"
            modules = spawn_modules(screen)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="""
Runs the entire software project. In particular, it initializes the
database (init_db), optionally applies a fixture to the database
(load_fixture), generates a roslaunch file for the software modules
(update_launch), runs the roslaunch file, and respawns if there is a change to
the configuration of the software modules
        """,
    )
    parser.add_argument(
        "-A", "--api_server", help="Address of the API from the api module"
    )
    parser.add_argument(
        "-D", "--db_server", help="Address of the database server"
    )
    parser.add_argument(
        '-f', '--fixture', help="Name of the fixture to apply to the database",
        default=[], action='append', dest='fixtures'
    )
    parser.add_argument(
        '-F', '--fixture_path',
        help="""
Path to a json fixture file to apply to the database. Specify the full path to
the fixture file. This flag is useful for loading fixtures not located in the
default fixtures directory.
        """,
        default=[], action='append', dest='fixture_paths'
    )
    parser.add_argument(
        "--screen", action="store_true",
        help="""
Passes the --screen flag to the roslaunch call, which forces all node output to
the screen. Useful for debugging.
""")
    vals = parser.parse_args()
    # Resolve named fixtures, then join named fixtures and path fixtures.
    fixture_paths = resolve_fixtures(vals.fixtures) + vals.fixture_paths
    main(
        api_server=vals.api_server, db_server=vals.db_server,
        fixtures=fixture_paths, screen=vals.screen
    )
